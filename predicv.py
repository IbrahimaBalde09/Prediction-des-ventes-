import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from statsmodels.tsa.arima.model import ARIMA
import warnings

warnings.filterwarnings("ignore")

st.set_page_config(page_title="Pr√©diction des Ventes", layout="centered")

st.title("üìà Pr√©diction des Ventes par Article")
st.markdown("T√©l√©verse un fichier Excel contenant les ventes annuelles par article.")

# Upload du fichier Excel
uploaded_file = st.file_uploader("Choisir un fichier Excel", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        st.success("Fichier charg√© avec succ√®s !")

        # V√©rification des colonnes attendues
        expected_columns = {'Ann√©e', 'Article', 'Ventes'}
        if not expected_columns.issubset(df.columns):
            st.error("Le fichier doit contenir les colonnes suivantes : Ann√©e, Article, Ventes.")
        else:
            articles = df['Article'].unique()
            article_selection = st.selectbox("S√©lectionne un article √† pr√©dire :", articles)

            # Donn√©es filtr√©es
            df_article = df[df['Article'] == article_selection].sort_values("Ann√©e")
            df_article.set_index("Ann√©e", inplace=True)

            # Affichage de la s√©rie historique
            st.subheader("üìä Ventes historiques")
            st.line_chart(df_article["Ventes"])

            # Mod√©lisation ARIMA
            if len(df_article) >= 4:
                model = ARIMA(df_article["Ventes"], order=(1, 1, 1))
                model_fit = model.fit()

                # Pr√©vision
                forecast_horizon = st.slider("Nombre d'ann√©es √† pr√©dire :", 1, 5, 3)
                forecast = model_fit.forecast(steps=forecast_horizon)
                last_year = df_article.index[-1]

                # Cr√©er un DataFrame des pr√©visions
                future_years = list(range(last_year + 1, last_year + forecast_horizon + 1))
                df_forecast = pd.DataFrame({
                    "Ann√©e": future_years,
                    "Article": article_selection,
                    "Ventes": forecast.values
                })

                # Fusion avec les donn√©es originales
                df_final = pd.concat([df.reset_index(), df_forecast], ignore_index=True)

                # Affichage des pr√©visions
                st.subheader("üîÆ Pr√©visions")
                fig, ax = plt.subplots()
                df_plot = df_final[df_final["Article"] == article_selection]
                ax.plot(df_plot["Ann√©e"], df_plot["Ventes"], marker='o')
                ax.set_title(f"Ventes pr√©vues pour {article_selection}")
                ax.set_xlabel("Ann√©e")
                ax.set_ylabel("Ventes")
                ax.grid()
                st.pyplot(fig)

                # T√©l√©chargement du fichier avec pr√©visions
                st.subheader("üì• T√©l√©charger le fichier avec pr√©visions")


                def to_excel(df):
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine='openpyxl') as writer:
                        df.to_excel(writer, index=False, sheet_name='Pr√©visions')
                    return output.getvalue()


                excel_bytes = to_excel(df_final)

                st.download_button(
                    label="üì§ T√©l√©charger le fichier Excel",
                    data=excel_bytes,
                    file_name="previsions_ventes.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            else:
                st.warning("Pas assez de donn√©es pour faire une pr√©vision fiable (minimum 4 ann√©es).")
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier : {e}")